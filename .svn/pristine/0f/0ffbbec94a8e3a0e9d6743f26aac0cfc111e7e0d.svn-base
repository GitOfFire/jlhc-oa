package com.jlhc.oa.service.impl;

import com.jlhc.ApplicationJlhc;
import com.jlhc.oa.dao.OrganizationMapper;
import com.jlhc.oa.dao.UserMapper;
import com.jlhc.oa.dao.UserOrganizationRelationMapper;
import com.jlhc.oa.dto.user.*;
import com.jlhc.oa.dto.user.example.OrganizationExample;
import com.jlhc.oa.dto.user.example.UserOrganizationRelationExample;
import com.jlhc.oa.service.OrganizationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.Date;
import java.util.List;

/**
 * @author renzhong
 * @version 1.0
 * @Description
 * @Date: Created in 16:11 2018/1/9 0009
 */
@Service
public class OrganizationServiceImpl implements OrganizationService{
    private final static Logger logger = LoggerFactory.getLogger(ApplicationJlhc.class);

    /**声明用户组织关系映射UserOrgMapper*/
    @Autowired
    UserOrganizationRelationMapper userOrganizationRelationMapper;

    /**声明OrgMapper*/
    @Autowired
    OrganizationMapper organizationMapper;

    /**声明UserMapper*/
    @Autowired
    UserMapper userMapper;

    /**
     * 判断下是不是root节点或者企业节点
     *
     * @param domainOrgId
     * @return true : 录入节点为root或者公司节点; false : 录入节点为普通节点
     */
    public boolean isRootOrCompany(Integer domainOrgId){
        boolean isRoot = 0 == domainOrgId;
        Integer rootId = this.showOrgParentIdByOrgChildId(domainOrgId);
        boolean isCompany;
        if (null == rootId){
            isCompany = false;
        }else {
            isCompany = (0 == rootId);
        }
        boolean b = isRoot || isCompany;
        //   boolean b = (0 == domainOrgId )||(0 == showOrgParentIdByOrgChildId(domainOrgId));
        //logger.info(Boolean.toString(b));
        return b;
    }

    /**
     * 单查父id
     *
     * @param domainOrgId
     * @return 父节点id
     */
    public Integer showOrgParentIdByOrgChildId(Integer domainOrgId){

        return organizationMapper.selectOrgParentIdByOrgChildId(domainOrgId);

    }

    //提供一个根据子节点查询根节点的接口,所谓的根节点是企业节点,也就是查到root根节点0以下的那一级

    /**
     * 所属企业节点查询
     *
     * @param domainId 被删除的组织节点
     * @return 被删除的组织所属的企业,或者是根节点
     */
    public Integer getChildOfRoot(Integer domainId){
        if (isRootOrCompany(domainId)){
            return domainId;
        }else {
            //查其父节点
            return this.getChildOfRoot(organizationMapper.selectOrgParentIdByOrgChildId(domainId));
        }
    }

    /**
     * 删除组织节点及其子节点
     *
     * @param orgId
     * @return
     */
    @Override
    public Integer dropOrgWithChild(Integer orgId) {
        //判定节点是否是公司节点或者根节点
        if(this.isRootOrCompany(orgId)){
            return -2;
        }
        //找父节点参数
        Integer parentId= organizationMapper.selectOrgParentIdByOrgChildId(orgId);
        int rescursionResultNum = 0;
        //递归处理节点关系
        return this.recursionDealWithTheDrop(rescursionResultNum,parentId,orgId);
    }


    /**
     * 递归进行节点删除操作
     *
     * @param domainOrgId
     * @return 1:操作成功;其他:操作失败
     */
    @Override
    public Integer recursionDealWithTheDrop(int resultNum,Integer domainParentId,Integer domainOrgId) {
        //判断是否是本节点,弹出递归
        if(domainParentId == domainOrgId){
            return resultNum;
        }else{
            //下属节点
            List<Organization> organizationChildren = organizationMapper.selectChildsByOrgId(domainOrgId);
            //logger.info(organizationChildren.toString());
            //下属用户
            List<User> users = userMapper.selectByOrg(domainOrgId);
            //是否有下属节点
            boolean hasOrgChild = (0 != organizationChildren.size() && null != organizationChildren);
            //是否有下属用户
            boolean hasUsers = (0 != users.size() && null != users);

            if (!hasOrgChild){

                //这时弹出的一种可能,无下属节点,处理一下下属用户,向上跳一层
                //处理用户
                if (hasUsers){
                    resultNum = resultNum + this.leaveOrg(users);
                }
                //在执行删除节点操作前,首先执行一下参数向上变换的过程
                Integer domainOrgIdToUp = this.organizationMapper.selectOrgParentIdByOrgChildId(domainOrgId);
                /*if (null == domainOrgId){
                    return this.recursionDealWithTheDrop(resultNum,domainParentId,domainParentId);
                }*/
                //没有节点,执行删除节点操作,此种条件下递归发生参数变化
                resultNum = resultNum + organizationMapper.deleteByPrimaryKey(domainOrgId);
                //入参发生变化,这时跳出递归的关键,第二个入参为父节点ID,注意!!!此处用domaimOrgId算得,dominaOrgId为递归中的变量
                return this.recursionDealWithTheDrop(resultNum,domainParentId,domainOrgIdToUp);
            }else {
                //拥有下属节点,处理本节点用户,节点再向下跳一级
                Organization firstChild = organizationChildren.get(0);
                if (hasUsers){
                    resultNum = resultNum + this.leaveOrg(users);
                }
                //向下跳一级,入参发生变化
                return this.recursionDealWithTheDrop(resultNum,domainParentId,firstChild.getOrgId());
            }
        }
    }
    //组织被删除时,用户与组织的关系处理
    //添加用户组织到,最高级公司组织

    /**
     * 用户脱离组织,重归公司分配
     *
     * @param users 需要脱离组织的员工
     * @return 操作数据库成功的数据条数
     */
    public Integer leaveOrg(List<User> users){
        Integer resultNum = 0;
        if (0 == users.size()||null == users){
            return resultNum;
        }
        for (User user:users) {
            //通过用户找组织id
            UserOrganizationRelationExample userOrganizationRelationExample = new UserOrganizationRelationExample();
            userOrganizationRelationExample.createCriteria()
                    .andUserIdEqualTo(user.getUserId());
            List<UserOrganizationRelation> userOrganizationRelations = userOrganizationRelationMapper.selectByExample(userOrganizationRelationExample);
            for (UserOrganizationRelation userOrganizationRelation: userOrganizationRelations) {
                //查询该组织所属公司
                Integer companyOrgId = this.getChildOfRoot(userOrganizationRelation.getOrgId());
                //修改用户组织机构为用户所在的公司
                resultNum = resultNum + userMapper.leaveOrg(user.getUserId(),companyOrgId);

            }
        }
        return resultNum;
    }


    /**
     * 查询同一个机构下的用户名相同的org
     *
     * @param orgName
     * @param orgParentId
     * @return
     */
    public List<Organization> findOrgByNameAndOrgParentId(String orgName,Integer orgParentId){
        OrganizationExample organizationExample = new OrganizationExample();
        organizationExample.createCriteria().andOrgNameEqualTo(orgName).andOrgParentIdEqualTo(orgParentId);
        List<Organization> organizations = organizationMapper.selectByExample(organizationExample);
        return organizations;
    }

    /**
     * 通过父亲节点查询其子节点
     *
     * @param orgParentId
     * @return
     */
    @Override
    public List<Organization> findOrgByParent(Integer orgParentId) {
        if (null == orgParentId){
            return null;
        }
        OrganizationExample organizationExample = new OrganizationExample();
        organizationExample.createCriteria()
            .andOrgParentIdEqualTo(orgParentId);
        List<Organization> organizations = organizationMapper.selectByExample(organizationExample);
        if (organizations.size() > 0){
            return organizations;
        }
        return null;
    }

    /**
     * 修改组织机构名称,修改父节点
     *
     * @param organization 组织机构数据
     * @return
     */
    @Override
    public Integer updateNameOfOrganization(Organization organization) {
        //查一下数据库,去重
        //添加对null的判断
        if (null == organization){
            return 0;
        }
        //父组织校验
        Organization organizationParent = organizationMapper.selectByPrimaryKey(organization.getOrgParentId());
        if (null == organizationParent){
            //存入默认父ID
            organization.setOrgParentId(0);
        }
        //名称重复校验
        List<Organization> orgsByName
                = this.findOrgByNameAndOrgParentId(organization.getOrgName(),organization.getOrgParentId());
        if (orgsByName.size() > 0){
            //有重复
            return -2;
        }
        //执行修改sql
        int resultNum = organizationMapper.updateByPrimaryKeySelective(organization);
        return resultNum;
    }

    /**
     * 录入数据,父ID判定在先,名称重复判定在后
     *
     * @param organization
     * @return
     */
    @Override
    public Integer createOrganization(Organization organization) {
        //判定空
        if (null == organization){
            return 0;
        }
        //条件查询该父Id是否存在
        Organization organizationParent = organizationMapper.selectByPrimaryKey(organization.getOrgParentId());
        if (null == organizationParent){
            //存入默认父ID
            organization.setOrgParentId(0);
        }
        //条件判定名称是否重复,同一组织机构下不能同名
        List<Organization> orgsByName
                = this.findOrgByNameAndOrgParentId(organization.getOrgName(),organization.getOrgParentId());
        if (orgsByName.size() > 0){
            //有重复
            return -2;
        }

        //存入当前时间
        organization.setOrgCreatedtime(new Date());
        //执行创建动作
        int resultNum = organizationMapper.insert(organization);//这里不插入空,哪怕报错
        return resultNum;
    }
}
