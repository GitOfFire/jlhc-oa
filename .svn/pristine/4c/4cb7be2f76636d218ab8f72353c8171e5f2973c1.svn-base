<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jlhc.oa.dao.RightMapper" >
  <resultMap id="BaseResultMap" type="com.jlhc.oa.dto.function.Right" >
    <id column="right_id" property="rightId" jdbcType="INTEGER" />
    <result column="right_group_identity" property="rightGroupIdentity" jdbcType="VARCHAR" />
    <result column="right_name" property="rightName" jdbcType="VARCHAR" />
    <result column="right_data" property="rightData" jdbcType="VARCHAR" />
    <result column="right_description" property="rightDescription" jdbcType="VARCHAR" />
    <result column="right_identity" property="rightIdentity" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    right_id, right_group_identity, right_name, right_data, right_description, right_identity
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.jlhc.oa.dto.function.example.RightExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from jl_right
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limit != null" >
      <if test="offset != null" >
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null" >
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from jl_right
    where right_id = #{rightId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from jl_right
    where right_id = #{rightId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.jlhc.oa.dto.function.example.RightExample" >
    delete from jl_right
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jlhc.oa.dto.function.Right" useGeneratedKeys="true" keyProperty="id" >
    insert into jl_right (right_id, right_group_identity, right_name, 
      right_data, right_description, right_identity
      )
    values (#{rightId,jdbcType=INTEGER}, #{rightGroupIdentity,jdbcType=VARCHAR}, #{rightName,jdbcType=VARCHAR}, 
      #{rightData,jdbcType=VARCHAR}, #{rightDescription,jdbcType=VARCHAR}, #{rightIdentity,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.jlhc.oa.dto.function.Right" useGeneratedKeys="true" keyProperty="id" >
    insert into jl_right
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="rightId != null" >
        right_id,
      </if>
      <if test="rightGroupIdentity != null" >
        right_group_identity,
      </if>
      <if test="rightName != null" >
        right_name,
      </if>
      <if test="rightData != null" >
        right_data,
      </if>
      <if test="rightDescription != null" >
        right_description,
      </if>
      <if test="rightIdentity != null" >
        right_identity,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="rightId != null" >
        #{rightId,jdbcType=INTEGER},
      </if>
      <if test="rightGroupIdentity != null" >
        #{rightGroupIdentity,jdbcType=VARCHAR},
      </if>
      <if test="rightName != null" >
        #{rightName,jdbcType=VARCHAR},
      </if>
      <if test="rightData != null" >
        #{rightData,jdbcType=VARCHAR},
      </if>
      <if test="rightDescription != null" >
        #{rightDescription,jdbcType=VARCHAR},
      </if>
      <if test="rightIdentity != null" >
        #{rightIdentity,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jlhc.oa.dto.function.example.RightExample" resultType="java.lang.Integer" >
    select count(*) from jl_right
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update jl_right
    <set >
      <if test="record.rightId != null" >
        right_id = #{record.rightId,jdbcType=INTEGER},
      </if>
      <if test="record.rightGroupIdentity != null" >
        right_group_identity = #{record.rightGroupIdentity,jdbcType=VARCHAR},
      </if>
      <if test="record.rightName != null" >
        right_name = #{record.rightName,jdbcType=VARCHAR},
      </if>
      <if test="record.rightData != null" >
        right_data = #{record.rightData,jdbcType=VARCHAR},
      </if>
      <if test="record.rightDescription != null" >
        right_description = #{record.rightDescription,jdbcType=VARCHAR},
      </if>
      <if test="record.rightIdentity != null" >
        right_identity = #{record.rightIdentity,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update jl_right
    set right_id = #{record.rightId,jdbcType=INTEGER},
      right_group_identity = #{record.rightGroupIdentity,jdbcType=VARCHAR},
      right_name = #{record.rightName,jdbcType=VARCHAR},
      right_data = #{record.rightData,jdbcType=VARCHAR},
      right_description = #{record.rightDescription,jdbcType=VARCHAR},
      right_identity = #{record.rightIdentity,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jlhc.oa.dto.function.Right" >
    update jl_right
    <set >
      <if test="rightGroupIdentity != null" >
        right_group_identity = #{rightGroupIdentity,jdbcType=VARCHAR},
      </if>
      <if test="rightName != null" >
        right_name = #{rightName,jdbcType=VARCHAR},
      </if>
      <if test="rightData != null" >
        right_data = #{rightData,jdbcType=VARCHAR},
      </if>
      <if test="rightDescription != null" >
        right_description = #{rightDescription,jdbcType=VARCHAR},
      </if>
      <if test="rightIdentity != null" >
        right_identity = #{rightIdentity,jdbcType=VARCHAR},
      </if>
    </set>
    where right_id = #{rightId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jlhc.oa.dto.function.Right" >
    update jl_right
    set right_group_identity = #{rightGroupIdentity,jdbcType=VARCHAR},
      right_name = #{rightName,jdbcType=VARCHAR},
      right_data = #{rightData,jdbcType=VARCHAR},
      right_description = #{rightDescription,jdbcType=VARCHAR},
      right_identity = #{rightIdentity,jdbcType=VARCHAR}
    where right_id = #{rightId,jdbcType=INTEGER}
  </update>

  <!--创建一条rightDate不重复的接口right数据-->
  <insert id="insertSelectiveNotExistRightData" parameterType="com.jlhc.oa.dto.function.Right">
    INSERT INTO jl_right (
    jl_right.right_data,
    jl_right.right_name,
    jl_right.right_description
    )
    SELECT
    #{rightData,jdbcType=VARCHAR},
    #{rightName,jdbcType=VARCHAR},
    #{rightDescription,jdbcType=VARCHAR}
    FROM DUAL
    WHERE NOT EXISTS(
    SELECT
    right_data
    FROM
    jl_right
    WHERE right_data=#{rightData,jdbcType=VARCHAR}
    );
  </insert>

  <select id="selectByFuncId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    SELECT
    r.*
    FROM
    jl_right r,
    jl_func_right fr
    WHERE
    fr.func_id = #{funcId,jdbcType=INTEGER}
    AND
    fr.right_id = r.right_id;
  </select>

  <!--根据用户Id查询其权限数据-->
  <select id="selectRightDatasByUserId" parameterType="java.lang.Integer" resultType="String">
    SELECT
    rig.right_data
    FROM
    jl_right rig
    LEFT JOIN
    jl_func_right frig on rig.right_id = frig.right_id
    LEFT JOIN
    jl_func_role frol on frig.func_id = frol.func_id
    LEFT JOIN
    jl_role_user ru on frol.role_id = ru.role_id
    WHERE
    ru.user_id = #{userId,jdbcType=INTEGER}
    ;
  </select>
</mapper>