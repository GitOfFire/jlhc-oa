<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jlhc.oa.dao.FunctionMapper" >
  <resultMap id="BaseResultMap" type="com.jlhc.oa.dto.function.Function" >
    <id column="func_id" property="funcId" jdbcType="INTEGER" />
    <result column="func_name" property="funcName" jdbcType="VARCHAR" />
    <result column="func_description" property="funcDescription" jdbcType="VARCHAR" />
    <result column="module_id" property="moduleId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    func_id, func_name, func_description, module_id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.jlhc.oa.dto.function.example.FunctionExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from jl_function
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limit != null" >
      <if test="offset != null" >
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null" >
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from jl_function
    where func_id = #{funcId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from jl_function
    where func_id = #{funcId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.jlhc.oa.dto.function.example.FunctionExample" >
    delete from jl_function
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jlhc.oa.dto.function.Function" useGeneratedKeys="true" keyProperty="id" >
    insert into jl_function (func_id, func_name, func_description, 
      module_id)
    values (#{funcId,jdbcType=INTEGER}, #{funcName,jdbcType=VARCHAR}, #{funcDescription,jdbcType=VARCHAR}, 
      #{moduleId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.jlhc.oa.dto.function.Function" useGeneratedKeys="true" keyProperty="id" >
    insert into jl_function
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="funcId != null" >
        func_id,
      </if>
      <if test="funcName != null" >
        func_name,
      </if>
      <if test="funcDescription != null" >
        func_description,
      </if>
      <if test="moduleId != null" >
        module_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="funcId != null" >
        #{funcId,jdbcType=INTEGER},
      </if>
      <if test="funcName != null" >
        #{funcName,jdbcType=VARCHAR},
      </if>
      <if test="funcDescription != null" >
        #{funcDescription,jdbcType=VARCHAR},
      </if>
      <if test="moduleId != null" >
        #{moduleId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jlhc.oa.dto.function.example.FunctionExample" resultType="java.lang.Integer" >
    select count(*) from jl_function
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update jl_function
    <set >
      <if test="record.funcId != null" >
        func_id = #{record.funcId,jdbcType=INTEGER},
      </if>
      <if test="record.funcName != null" >
        func_name = #{record.funcName,jdbcType=VARCHAR},
      </if>
      <if test="record.funcDescription != null" >
        func_description = #{record.funcDescription,jdbcType=VARCHAR},
      </if>
      <if test="record.moduleId != null" >
        module_id = #{record.moduleId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update jl_function
    set func_id = #{record.funcId,jdbcType=INTEGER},
      func_name = #{record.funcName,jdbcType=VARCHAR},
      func_description = #{record.funcDescription,jdbcType=VARCHAR},
      module_id = #{record.moduleId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jlhc.oa.dto.function.Function" >
    update jl_function
    <set >
      <if test="funcName != null" >
        func_name = #{funcName,jdbcType=VARCHAR},
      </if>
      <if test="funcDescription != null" >
        func_description = #{funcDescription,jdbcType=VARCHAR},
      </if>
      <if test="moduleId != null" >
        module_id = #{moduleId,jdbcType=INTEGER},
      </if>
    </set>
    where func_id = #{funcId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jlhc.oa.dto.function.Function" >
    update jl_function
    set func_name = #{funcName,jdbcType=VARCHAR},
      func_description = #{funcDescription,jdbcType=VARCHAR},
      module_id = #{moduleId,jdbcType=INTEGER}
    where func_id = #{funcId,jdbcType=INTEGER}
  </update>

  <!--根据角色查询其所有的功能-->
  <select id="selectByRoleId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    SELECT
    f.func_id AS func_id,
    func_name,
    func_description,
    module_id
    FROM
    jl_function f,
    jl_func_role fr
    WHERE
    fr.role_id=#{roleId,jdbcType=INTEGER}
    AND
    f.func_id=fr.func_id;
  </select>
  <select id="getFunctionIdsByIdListParams" resultType="java.lang.Integer">

      select
      f.func_id as funcId
      from jl_function f
      where
      f.func_id in
      <foreach collection="list" item="funcId" index="index"
               open="(" close=")" separator=",">
        #{funcId}
      </foreach>


  </select>
  <select id="getFunctionModuleIdsByByIdListParams" resultType="java.lang.Integer">
    select
    f.module_id as module_id
    from jl_function f
    where f.func_id in
    <foreach collection="list" item="funcId" index="index"
             open="(" close=")" separator=",">
      #{funcId}
    </foreach>
  </select>

  <!--同一模块必须不同功能名创建-->
  <insert id="insertNotExistTheSameName" parameterType="com.jlhc.oa.dto.function.Function">
    INSERT INTO jl_function (
    jl_function.func_description,
    jl_function.func_name,
    jl_function.module_id
    )
    SELECT
    #{funcDescription,jdbcType=VARCHAR},
    #{funcName,jdbcType=VARCHAR},
    #{moduleId,jdbcType=INTEGER}
    FROM DUAL
    WHERE NOT EXISTS(
    SELECT
    func_name,
    module_id
    FROM
    jl_function
    WHERE func_name=#{funcName,jdbcType=VARCHAR}
    AND
    module_id=#{moduleId,jdbcType=INTEGER}
    );
  </insert>
</mapper>